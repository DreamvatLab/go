// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.22.3
// source: xdto.proto

package xdto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address1 string `protobuf:"bytes,1,opt,name=Address1,proto3" json:"Address1,omitempty"`
	Address2 string `protobuf:"bytes,2,opt,name=Address2,proto3" json:"Address2,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	State    string `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	Country  string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	ZipCode  string `protobuf:"bytes,6,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_xdto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_xdto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_xdto_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *Address) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Permission_ID string      `protobuf:"bytes,2,opt,name=Permission_ID,json=PermissionID,proto3" json:"Permission_ID,omitempty"`
	Area          string      `protobuf:"bytes,3,opt,name=Area,proto3" json:"Area,omitempty"`
	Controller    string      `protobuf:"bytes,4,opt,name=Controller,proto3" json:"Controller,omitempty"`
	Action        string      `protobuf:"bytes,5,opt,name=Action,proto3" json:"Action,omitempty"`
	Permission    *Permission `protobuf:"bytes,6,opt,name=Permission,proto3" json:"Permission,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_xdto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_xdto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_xdto_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Route) GetPermission_ID() string {
	if x != nil {
		return x.Permission_ID
	}
	return ""
}

func (x *Route) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Route) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *Route) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Route) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	IsAllowGuest   bool     `protobuf:"varint,3,opt,name=IsAllowGuest,proto3" json:"IsAllowGuest,omitempty"`
	IsAllowAnyUser bool     `protobuf:"varint,4,opt,name=IsAllowAnyUser,proto3" json:"IsAllowAnyUser,omitempty"`
	AllowedRoles   int64    `protobuf:"varint,5,opt,name=AllowedRoles,proto3" json:"AllowedRoles,omitempty"`
	Level          int32    `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	Scopes         []string `protobuf:"bytes,7,rep,name=Scopes,proto3" json:"Scopes,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_xdto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_xdto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_xdto_proto_rawDescGZIP(), []int{2}
}

func (x *Permission) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetIsAllowGuest() bool {
	if x != nil {
		return x.IsAllowGuest
	}
	return false
}

func (x *Permission) GetIsAllowAnyUser() bool {
	if x != nil {
		return x.IsAllowAnyUser
	}
	return false
}

func (x *Permission) GetAllowedRoles() int64 {
	if x != nil {
		return x.AllowedRoles
	}
	return 0
}

func (x *Permission) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Permission) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Bytes   []byte `protobuf:"bytes,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_xdto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_xdto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_xdto_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Result) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

var File_xdto_proto protoreflect.FileDescriptor

var file_xdto_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x78, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x78, 0x64,
	0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x0d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x47, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x20, 0x5a, 0x1e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x65, 0x61, 0x6d,
	0x76, 0x61, 0x74, 0x4c, 0x61, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x78, 0x64, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xdto_proto_rawDescOnce sync.Once
	file_xdto_proto_rawDescData = file_xdto_proto_rawDesc
)

func file_xdto_proto_rawDescGZIP() []byte {
	file_xdto_proto_rawDescOnce.Do(func() {
		file_xdto_proto_rawDescData = protoimpl.X.CompressGZIP(file_xdto_proto_rawDescData)
	})
	return file_xdto_proto_rawDescData
}

var file_xdto_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_xdto_proto_goTypes = []any{
	(*Address)(nil),    // 0: xdto.Address
	(*Route)(nil),      // 1: xdto.Route
	(*Permission)(nil), // 2: xdto.Permission
	(*Result)(nil),     // 3: xdto.Result
}
var file_xdto_proto_depIdxs = []int32{
	2, // 0: xdto.Route.Permission:type_name -> xdto.Permission
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_xdto_proto_init() }
func file_xdto_proto_init() {
	if File_xdto_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xdto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xdto_proto_goTypes,
		DependencyIndexes: file_xdto_proto_depIdxs,
		MessageInfos:      file_xdto_proto_msgTypes,
	}.Build()
	File_xdto_proto = out.File
	file_xdto_proto_rawDesc = nil
	file_xdto_proto_goTypes = nil
	file_xdto_proto_depIdxs = nil
}
